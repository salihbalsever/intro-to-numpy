import numpy as np
#Iterating in NumPy refers to looping through elements of a NumPy array. Unlike regular Python lists, NumPy arrays support efficient 
# iteration using functions like np.nditer, allowing you to loop over each element regardless of the arrayâ€™s dimensionality.
arr = np.array([[1, 2], [3, 4]])

for x in np.nditer(arr):
    print(x)

    #Iterate on the elements of the following 2-D array:
arr2D = np.array([[1, 2, 3], [4, 5, 6]])
for x in np.nditer(arr2D):
    print(x)
#Iterate on each scalar element of the 2-D array:
arr = np.array([[1, 2, 3], [4, 5, 6]])

for x in arr:
  for y in x:
    print(y)

    #Iterate on the elements of the following 3-D array:

arr3D = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])
for x in np.nditer(arr3D):
    print(x)

#Iterating Arrays Using nditer()
#np.nditer() is a NumPy iterator that allows efficient looping over multi-dimensional arrays.
arr = np.array([[10, 20], [30, 40]])

for x in np.nditer(arr):
    print(x)
#Iterating Array With Different Data Types
#When iterating, you can change the data type of elements using the op_dtypes parameter in nditer(). This is useful for casting data during iteration.
arr = np.array([1, 2, 3])

for x in np.nditer(arr, flags=['buffered'], op_dtypes=['S']):
  print(x)
  #Enumerated Iteration Using ndenumerate()
  #np.ndenumerate() allows you to iterate over a NumPy array while keeping track of the index of each element.
  arr = np.array([[10, 20], [30, 40]])

for index, value in np.ndenumerate(arr):
    print(f"Index: {index}, Value: {value}")